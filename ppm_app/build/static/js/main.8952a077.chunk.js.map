{"version":3,"sources":["redux.js","component/Navigation.js","component/Home.js","component/ProductTile.js","component/ProductList.js","component/NewProduct.js","component/EditProduct.js","container/ProductParentContainer.js","App.js","serviceWorker.js","index.js"],"names":["initialState","productList","deleteTileItem","id","type","payload","store","createStore","state","arguments","length","undefined","action","console","log","Object","objectSpread","concat","toConsumableArray","slice","data","window","__REDUX_DEVTOOLS_EXTENSION__","Navigation","props","react_default","a","createElement","react_router_dom","className","to","Home","connect","dispatch","deleteReduxItem","src","tileItem","url","alt","name","price","onClick","item","axios","delete","then","response","pos","catch","error","ProductList","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","get","updatereduxStore","prodList","map","index","component_ProductTile","React","Component","NewProduct","handleChange","event","setState","defineProperty","target","value","formSubmit","preventDefault","newProduct","post","status","newProductRedux","toString","addNewProduct","history","push","onSubmit","htmlFor","onChange","product","EditProduct","editableProduct","find","match","params","findIndex","deleteItem","deleteProduct","updateItem","updatedObject","put","updateProductRedux","_this2","idx","ProductParentContainer","component_Navigation","react_router","exact","from","path","component","App","container_ProductParentContainer","Boolean","location","hostname","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8952a077.chunk.js","sourcesContent":["//create store -- in redux library\nimport { createStore } from 'redux';\n//import { stat } from 'fs';\n\n//initial State\nconst initialState = {\n  productList: [],\n};\n\n//action\nexport const updateState = (prodlist) => ({\n  type: \"UPDATE_STATE\",\n  payload: prodlist,\n});\n\nexport const addNewProduct = (product) => ({\n  type: \"ADD_NEW_PRODUCT\",\n  payload: product,\n});\n\nexport const deleteTileItem = (id) => ({\n  type: \"DELETE_PRODUCT\",\n  payload: id,\n});\n\nexport const updateProductData = (id, data) => ({\n  type: \"UPDATE_PRODUCT_DATA\",\n  data: data,\n  payload: id,\n})\n\n//reducer\n//initial state and action to be passed as parameters to my reducer\nexport const reducer = (state = initialState, action) => {\n  console.log(action);\n  switch (action.type) {\n    case \"UPDATE_STATE\":\n      return {\n        ...state,\n        productList: action.payload,\n      };\n    case \"ADD_NEW_PRODUCT\":\n      return {\n        ...state,\n        productList: [...state.productList, action.payload],\n      };\n    case \"DELETE_PRODUCT\":\n      return {\n        ...state,\n        productList: [...state.productList.slice(0, action.payload), ...state.productList.slice(action.payload + 1)],\n      }\n    case \"UPDATE_PRODUCT_DATA\":\n      return {\n        ...state,\n        productList: [\n          ...state.productList.slice(0, action.payload),\n          state.productList[action.payload] = action.data,\n          ...state.productList.slice(action.payload + 1)\n        ],\n      }\n\n    default:\n      return state;\n  }\n\n};\n\n//export my store to the provider\n// first parameter must be a reducer - a function\n// switched the order around - threw an error saying reducer is not a function\nexport const store = createStore(\n  reducer,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport \"../styles/navigation.css\";\n\nconst Navigation = (props) => {\n  return (\n    <div id=\"navigation\">\n      <Link className=\"navtab\" to=\"/home\">Home</Link>\n      <Link className=\"navtab\" to=\"/products\">Product List</Link>\n      <Link className=\"navtab\" to=\"/products/new\">Product Creation</Link>\n    </div>\n\n  );\n\n}\nexport default Navigation;","import React from 'react';\nimport \"../styles/productbody.css\";\n\nconst Home = (props) => {\n  return (\n    <div className=\"bodycontainer\">\n      <h1>Home Page</h1>\n      <p>Welcome to the Project Product Management. Here we can manage a <br></br>\n        set of products. You are able to create new products, remove old<br></br> products, and\n      edit products.</p>\n    </div>\n\n  );\n\n}\nexport default Home;","import React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { deleteTileItem } from '../redux';\nimport \"../styles/producttile.css\";\n\n\nconst ProductTile = (props) => {\n\n  const deleteItem = (item) => {\n    console.log(item);\n    axios.delete(`/deleteproduct/${item.id}`)\n      .then((response) => {\n        console.log(response);\n        //if successfully deleted from MockApi - remove this id from redux store\n        props.deleteReduxItem(props.pos);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n\n  }\n  return (\n    <div className=\"tile\">\n      <img className=\"tileimg\" src={props.tileItem.url} alt=\"shoes\" />\n      <h2>{props.tileItem.name}</h2>\n      <h2>${props.tileItem.price}</h2>\n      <button className=\"tileedit\"><Link to={`/products/edit/${props.tileItem.id}`}>EDIT</Link></button>\n      <button className=\"tiledelete\" onClick={() => { deleteItem(props.tileItem) }}>Delete</button>\n    </div>\n  );\n}\nconst mapDispatchToProps = (dispatch) => ({\n  deleteReduxItem: (id) => { dispatch(deleteTileItem(id)); }\n});\n\nexport default connect(null, mapDispatchToProps)(ProductTile);","import React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport ProductTile from './ProductTile';\nimport { updateState } from '../redux';\nimport \"../styles/productbody.css\";\n\nclass ProductList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // productList: [],\n    };\n  };\n  componentDidMount = () => {\n    console.log(\"on component did mount\");\n    //axios call to fetch data from MockApi\n    axios.get('http://localhost:1337/fetchproducts')\n      .then((response) => {\n        console.log(response);\n        //push it to redux\n        //this.setState({ productList: response.data });\n        this.props.updatereduxStore(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n\n  }\n  render() {\n    console.log(this.props.prodList);\n    return (\n      <div className=\"bodycontainer\">\n        <h1>Products List</h1>\n        {this.props.prodList.map((item, index) => {\n          return (<ProductTile tileItem={item} pos={index} />)\n        })}\n      </div>\n    )\n  }\n\n}\n\nconst mapStateToProps = (state) => ({\n  prodList: state.productList,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updatereduxStore: (data) => {\n    dispatch(updateState(data));\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductList);","import React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { addNewProduct } from '../redux';\nimport \"../styles/productbody.css\";\n\nclass NewProduct extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      price: '',\n      url: '',\n    }\n\n  };\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  formSubmit = (event) => {\n    event.preventDefault();\n    //mockapi automatically updates is but redux is not capable of automatically updating id\n    var newProduct = {\n      name: this.state.name,\n      price: this.state.price,\n      url: this.state.url,\n    }\n    // axios call to post this data to MockAPI\n    console.log(newProduct);\n    axios.post('/addnewproduct', newProduct)\n      .then((response) => {\n        //console.log(response);\n        //update Redux store\n        if (response.status === 200) {\n          var id = this.props.prodList.length + 1;\n          var newProductRedux = {\n            id: id.toString(),\n            url: this.state.url,\n            name: this.state.name,\n            price: this.state.price,\n          };\n          this.props.addNewProduct(newProductRedux);\n          //clear the state\n          this.setState({ name: '', price: '', url: '' });\n          //reroute to Product List page\n          this.props.history.push('/products');\n\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n  }\n\n  render() {\n    return (\n      <div className=\"bodycontainer\">\n        <h1>Create a New Product</h1>\n        <form onSubmit={this.formSubmit}>\n          <div className=\"newprodinput\">\n            <label className=\"newprodlabel\" htmlFor=\"name\">Title</label>\n            <input className=\"newprodbox\" name=\"name\" onChange={this.handleChange} value={this.state.name} />\n          </div>\n          <div className=\"newprodinput\">\n            <label className=\"newprodlabel\" htmlFor=\"price\">Price</label>\n            <input className=\"newprodbox\" name=\"price\" onChange={this.handleChange} value={this.state.price} />\n          </div>\n          <div className=\"newprodinput\">\n            <label className=\"newprodlabel\" htmlFor=\"url\">Image Url</label>\n            <input className=\"newprodbox\" name=\"url\" onChange={this.handleChange} value={this.state.url} />\n          </div>\n          <button id=\"newprodbtn\">CREATE</button>\n        </form>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  prodList: state.productList,\n\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addNewProduct: (product) => {\n    dispatch(addNewProduct(product));\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewProduct);","import React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { deleteTileItem, updateProductData } from '../redux';\nimport \"../styles/productbody.css\";\n\nclass EditProduct extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      price: '',\n      url: '',\n      index: '',\n    };\n  };\n\n  componentDidMount = () => {\n    var editableProduct = this.props.product.find(item => item.id === this.props.match.params.id);\n    var index = this.props.product.findIndex(item => item.id === this.props.match.params.id);\n    console.log(index);\n    this.setState({\n      name: editableProduct.name,\n      price: editableProduct.price,\n      url: editableProduct.url,\n      index: index,\n    });\n\n\n  }\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  deleteItem = (id) => {\n    axios.delete(`/deleteproduct/${id}`)\n      .then((response) => {\n        console.log(response);\n        //if successfully deleted from MockApi - remove this id from redux store\n        this.props.deleteProduct(this.state.index);\n        //reroute page to product list\n        this.props.history.push('/products');\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  updateItem = () => {\n    //capture the input into a json object\n    var updatedObject = {\n      name: this.state.name,\n      price: this.state.price,\n      url: this.state.url,\n    };\n\n    //axios call to update data\n    axios.put(`/editProduct/${this.props.match.params.id}`, updatedObject)\n      .then((response) => {\n        console.log(response);\n        //if successful update redux store \n        this.props.updateProductRedux(this.state.index, updatedObject);\n\n        //reroute to product list\n        this.props.history.push('/products');\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n\n  }\n\n  formSubmit = (event) => {\n    event.preventDefault();\n  }\n\n  render() {\n\n    return (\n      <div className=\"bodycontainer\">\n        <h1>Edit Product</h1>\n        <form onSubmit={this.formSubmit}>\n          <div className=\"newprodinput\">\n            <label className=\"newprodlabel\" htmlFor=\"name\">Title</label>\n            <input className=\"newprodbox\" name=\"name\" onChange={this.handleChange} value={this.state.name} />\n          </div>\n          <div className=\"newprodinput\">\n            <label className=\"newprodlabel\" htmlFor=\"price\">Price</label>\n            <input className=\"newprodbox\" name=\"price\" onChange={this.handleChange} value={this.state.price} />\n          </div>\n          <div className=\"newprodinput\">\n            <label className=\"newprodlabel\" htmlFor=\"url\">Image Url</label>\n            <input className=\"newprodbox\" name=\"url\" onChange={this.handleChange} value={this.state.url} />\n          </div>\n          <button id=\"newproddelbtn\" onClick={() => { this.deleteItem(this.props.match.params.id) }}>Delete</button>\n          <button id=\"newprodupdbtn\" onClick={this.updateItem}>Update</button>\n        </form>\n      </div>\n    )\n  }\n\n}\n\nconst mapStateToProps = (state) => ({\n  product: state.productList,\n\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteProduct: (id) => { dispatch(deleteTileItem(id)) },\n  updateProductRedux: (idx, item) => { dispatch(updateProductData(idx, item)) },\n\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditProduct);","import React from 'react';\nimport 'react-router';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Navigation from '../component/Navigation';\nimport Home from '../component/Home';\nimport ProductList from '../component/ProductList';\nimport NewProduct from '../component/NewProduct';\nimport EditProduct from '../component/EditProduct';\n//import \"../styles/productparentcontainer.css\";\n\nclass ProductParentContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n\n  };\n  render() {\n    return (\n      <div >\n        <h1 className=\"container btn\">PPM - Project Product Management</h1>\n        <Navigation />\n        {/* Routing should go here */}\n        <Switch>\n          <Redirect exact from=\"/\" to=\"/home\" />\n          <Route path=\"/home\" component={Home} />\n          <Route path=\"/products/edit/:id\" component={EditProduct} />\n          <Route path=\"/products/new\" component={NewProduct} />\n          <Route path=\"/products\" component={ProductList} />\n        </Switch>\n      </div>\n    );\n  }\n\n}\nexport default ProductParentContainer;","import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom'; //do not forget this - else route will not work\nimport ProductParentContainer from './container/ProductParentContainer';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <ProductParentContainer />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Provider } from 'react-redux';\nimport { store } from './redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}